// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          String      @id @default(uuid())
  title       String
  description String
  slug        String      @unique @default(cuid())
  body        String
  comments    Comment[]
  likes       PostLike[]
  shares      PostShare[]
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  tags        Tag[]
}

model Tag {
  name  String @id @unique
  posts Post[]
}

model User {
  id               String           @id @default(uuid())
  name             String           @unique
  password         String
  posts            Post[]
  comments         Comment[]
  commentLikes     CommentLike[]
  postLikes        PostLike[]
  postShares       PostShare[]
  sentMessages     PrivateMessage[] @relation("sentMessages")
  receivedMessages PrivateMessage[] @relation("receivedMessages")
}

model Comment {
  id        String        @id @default(uuid())
  message   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  parent    Comment?      @relation("ParentChild", fields: [parentId], references: [id])
  children  Comment[]     @relation("ParentChild")
  parentId  String?
  likes     CommentLike[]
}

model CommentLike {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  commentId String

  @@id([userId, commentId])
}

model PostLike {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  postId String

  @@id([userId, postId])
}

model PostShare {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  postId String

  @@id([userId, postId])
}

model PrivateMessage {
  message   String
  timestamp DateTime @default(now())

  id String @id @default(cuid())

  sender      User   @relation(name: "sentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User   @relation(name: "receivedMessages", fields: [recipientId], references: [id], onDelete: Cascade)
  senderId    String
  recipientId String

  attachmentType    String?
  attachmentPending Boolean?
  attachmentError   Boolean?
  attachmentKey     String?

  @@index([senderId])
}
