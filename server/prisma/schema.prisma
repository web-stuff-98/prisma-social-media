// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          String      @id @default(uuid())
  title       String
  description String
  slug        String      @unique @default(cuid())
  body        String
  comments    Comment[]
  likes       PostLike[]
  shares      PostShare[]
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  tags        Tag[]
  blur        String?

  imagePending Boolean @default(true)
  imageKey     String?
}

model Tag {
  name  String @id @unique
  posts Post[]
}

model User {
  id                     String           @id @default(uuid())
  name                   String           @unique
  password               String
  createdAt              DateTime         @default(now())
  posts                  Post[]
  comments               Comment[]
  commentLikes           CommentLike[]
  postLikes              PostLike[]
  postShares             PostShare[]
  sentPrivateMessages    PrivateMessage[] @relation("sentPrivateMessages")
  receivedPrivateMessage PrivateMessage[] @relation("receivedPrivateMessage")
  sentRoomMessage        RoomMessage[]    @relation("sentRoomMessages")
  rooms                  Room[]
  joinedRooms            Room[]           @relation("roomMember")
  bannedRooms            Room[]           @relation("roomBanned")
  profile                Profile?
  pfp                    Pfp?
}

model Pfp {
  base64 String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@id([userId])
}

model Profile {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  backgroundBase64 String?
  bio              String?

  @@id([userId])
}

model Comment {
  id        String        @id @default(uuid())
  message   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  parent    Comment?      @relation("ParentChild", fields: [parentId], references: [id])
  children  Comment[]     @relation("ParentChild")
  parentId  String?
  likes     CommentLike[]
}

model CommentLike {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  commentId String

  @@id([userId, commentId])
}

model PostLike {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  postId String

  @@id([userId, postId])
}

model PostShare {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  postId String

  @@id([userId, postId])
}

model PrivateMessage {
  message String
  id      String @id @default(cuid())

  sender      User?   @relation(name: "sentPrivateMessages", fields: [senderId], references: [id], onDelete: Cascade)
  recipient   User    @relation(name: "receivedPrivateMessage", fields: [recipientId], references: [id], onDelete: Cascade)
  senderId    String?
  recipientId String

  hasAttachment     Boolean  @default(false)
  attachmentType    String?
  attachmentPending Boolean?
  attachmentError   Boolean?
  attachmentKey     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  readByRecipient Boolean @default(false)

  @@index([senderId])
}

model Room {
  id   String @id @default(cuid())
  name String

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  members User[] @relation(name: "roomMember")
  banned  User[] @relation(name: "roomBanned")

  createdAt DateTime      @default(now())
  messages  RoomMessage[]

  public Boolean    @default(true)
  image  RoomImage?
}

model RoomImage {
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId String

  base64 String

  @@id([roomId])
}

model RoomMessage {
  message String
  id      String @id @default(cuid())

  //if there is no sender relation that means it is a message from the server
  sender   User?   @relation(name: "sentRoomMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId String?

  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId String

  hasAttachment     Boolean  @default(false)
  attachmentType    String?
  attachmentPending Boolean?
  attachmentError   Boolean?
  attachmentKey     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
